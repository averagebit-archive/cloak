// Code generated by protoc-gen-go-grpc.go. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc.go v1.2.0
// - protoc             v3.12.4
// source: proto/cloak_service.proto

package cloak_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc.go package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloakServiceClient is the client API for CloakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloakServiceClient interface {
	GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error)
}

type cloakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloakServiceClient(cc grpc.ClientConnInterface) CloakServiceClient {
	return &cloakServiceClient{cc}
}

func (c *cloakServiceClient) GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error) {
	out := new(GetCurrentTimeResponse)
	err := c.cc.Invoke(ctx, "/cloak.service.CloakService/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloakServiceServer is the server API for CloakService service.
// All implementations must embed UnimplementedCloakServiceServer
// for forward compatibility
type CloakServiceServer interface {
	GetCurrentTime(context.Context, *GetCurrentTimeRequest) (*GetCurrentTimeResponse, error)
	mustEmbedUnimplementedCloakServiceServer()
}

// UnimplementedCloakServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloakServiceServer struct {
}

func (UnimplementedCloakServiceServer) GetCurrentTime(context.Context, *GetCurrentTimeRequest) (*GetCurrentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}
func (UnimplementedCloakServiceServer) mustEmbedUnimplementedCloakServiceServer() {}

// UnsafeCloakServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloakServiceServer will
// result in compilation errors.
type UnsafeCloakServiceServer interface {
	mustEmbedUnimplementedCloakServiceServer()
}

func RegisterCloakServiceServer(s grpc.ServiceRegistrar, srv CloakServiceServer) {
	s.RegisterService(&CloakService_ServiceDesc, srv)
}

func _CloakService_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloakServiceServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloak.service.CloakService/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloakServiceServer).GetCurrentTime(ctx, req.(*GetCurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloakService_ServiceDesc is the grpc.ServiceDesc for CloakService service.
// It's only intended for direct use with grpc.go.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloakService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloak.service.CloakService",
	HandlerType: (*CloakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentTime",
			Handler:    _CloakService_GetCurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cloak_service.proto",
}
