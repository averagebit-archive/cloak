// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloak_service/service.proto

package cloak_serviceconnect

import (
	context "context"
	errors "errors"
	cloak_service "github.com/averagebit/cloak/core/generated/cloak_service"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CloakServiceName is the fully-qualified name of the CloakService service.
	CloakServiceName = "cloak_service.CloakService"
)

// CloakServiceClient is a client for the cloak_service.CloakService service.
type CloakServiceClient interface {
	Echo(context.Context, *connect_go.Request[cloak_service.StringMessage]) (*connect_go.Response[cloak_service.StringMessage], error)
	Login(context.Context, *connect_go.Request[cloak_service.LoginRequest]) (*connect_go.Response[cloak_service.LoginResponse], error)
}

// NewCloakServiceClient constructs a client for the cloak_service.CloakService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloakServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CloakServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cloakServiceClient{
		echo: connect_go.NewClient[cloak_service.StringMessage, cloak_service.StringMessage](
			httpClient,
			baseURL+"/cloak_service.CloakService/Echo",
			opts...,
		),
		login: connect_go.NewClient[cloak_service.LoginRequest, cloak_service.LoginResponse](
			httpClient,
			baseURL+"/cloak_service.CloakService/Login",
			opts...,
		),
	}
}

// cloakServiceClient implements CloakServiceClient.
type cloakServiceClient struct {
	echo  *connect_go.Client[cloak_service.StringMessage, cloak_service.StringMessage]
	login *connect_go.Client[cloak_service.LoginRequest, cloak_service.LoginResponse]
}

// Echo calls cloak_service.CloakService.Echo.
func (c *cloakServiceClient) Echo(ctx context.Context, req *connect_go.Request[cloak_service.StringMessage]) (*connect_go.Response[cloak_service.StringMessage], error) {
	return c.echo.CallUnary(ctx, req)
}

// Login calls cloak_service.CloakService.Login.
func (c *cloakServiceClient) Login(ctx context.Context, req *connect_go.Request[cloak_service.LoginRequest]) (*connect_go.Response[cloak_service.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// CloakServiceHandler is an implementation of the cloak_service.CloakService service.
type CloakServiceHandler interface {
	Echo(context.Context, *connect_go.Request[cloak_service.StringMessage]) (*connect_go.Response[cloak_service.StringMessage], error)
	Login(context.Context, *connect_go.Request[cloak_service.LoginRequest]) (*connect_go.Response[cloak_service.LoginResponse], error)
}

// NewCloakServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloakServiceHandler(svc CloakServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/cloak_service.CloakService/Echo", connect_go.NewUnaryHandler(
		"/cloak_service.CloakService/Echo",
		svc.Echo,
		opts...,
	))
	mux.Handle("/cloak_service.CloakService/Login", connect_go.NewUnaryHandler(
		"/cloak_service.CloakService/Login",
		svc.Login,
		opts...,
	))
	return "/cloak_service.CloakService/", mux
}

// UnimplementedCloakServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloakServiceHandler struct{}

func (UnimplementedCloakServiceHandler) Echo(context.Context, *connect_go.Request[cloak_service.StringMessage]) (*connect_go.Response[cloak_service.StringMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cloak_service.CloakService.Echo is not implemented"))
}

func (UnimplementedCloakServiceHandler) Login(context.Context, *connect_go.Request[cloak_service.LoginRequest]) (*connect_go.Response[cloak_service.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cloak_service.CloakService.Login is not implemented"))
}
